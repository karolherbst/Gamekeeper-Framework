/*
 * C++ Standard Library Boost Wrapper
 * Boost fallbacks for missing C++11 functionality
 *
 * Written in 2013 by Karol Herbst <gamekeeper@karolherbst.de>
 * To the extent possible under law, the author(s) have dedicated all copyright
 * and related and neighboring rights to this software to the public domain
 * worldwide. This software is distributed without any warranty.
 *
 * You should have received a copy of the CC0 Public Domain Dedication along with
 * this software. If not, see <http://creativecommons.org/publicdomain/zero/1.0/>.
 */

#ifndef STD_COMPAT_THREAD
#define STD_COMPAT_THREAD 1

#include <thread>

#if defined(__GNUC__) && !defined(__clang__) && (!defined(_GLIBCXX_HAS_GTHREADS) || !defined(_GLIBCXX_USE_C99_STDINT_TR1))

#include <boost/chrono/duration.hpp>
#include <boost/thread/thread.hpp>

namespace std
{
	class thread : public boost::thread
	{
	public:
		template<typename Callable>
		thread (Callable func) : boost::thread(func){};
	};

namespace this_thread
{
	inline thread::id get_id() noexcept
	{
		return boost::this_thread::get_id();
	}

	template <class Rep, class Period>
	inline void sleep_for (const chrono::duration<Rep,Period>& rel_time)
	{
		typedef boost::chrono::duration<Rep, boost::ratio<Period::num, Period::den>> BDuration;
		boost::this_thread::sleep_for(BDuration(rel_time.count()));
	}

	template <class Clock, class Duration>
	inline void sleep_until (const chrono::time_point<Clock,Duration>& abs_time)
	{
		sleep_for(abs_time - Clock::now());
	}
}
}

#endif

#endif //STD_COMPAT_THREAD
